/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.data;

import java.util.Vector;
import javax.swing.MutableComboBoxModel;
import javax.swing.event.ListDataListener;

/**
 *
 * @author Karima
 */
public class WurfNamenComboBoxModel implements MutableComboBoxModel {
// Das Attribut eintraege stellt unsere Listelemente dar
    Vector eintraege = new Vector();
    // Index für selektierten Eintrag
    int index=-1;
 
     /* Hier geben wir zurück, was als selektierter Eintrag 
        in der JComboBox angezeigt werden soll */
    @Override
    public Object getSelectedItem()
    {
        if(index >= 0)
        {
            return ((WurfNamen)eintraege.elementAt(index));
        }
        else
        {
            return null;
        }
    }
 
    // Diese Funktion wird beim Selektieren eines Eintrages aufgerufen
    // Dort ermitteln wir den Index für das ausgewählte Element
    // anItem ist der in der JComoboBox ausgewählte Eintrag
    @Override
    public void setSelectedItem(Object anItem)
    {
        for(int i = 0; i< eintraege.size(); i++)
        {
            if(((WurfNamen)eintraege.elementAt(i)).equals(anItem))
            {
                index = i;
                break;
            }
        }
    }
 
    // Hier liefern wir die Anzahl der Elemente in unserer Liste zurück
    @Override
    public int getSize()
    {
        return eintraege.size();
    }
 
    // Hier wird ein Element an einer bestimmten Stelle zurückgegeben
    @Override
    public Object getElementAt(int index)
    {
        return ((WurfNamen)eintraege.elementAt(index));
    }
 
 
    // Hier fügen wir unserer Liste ein Highscore-Objekt hinzu
    // Wir ordnen es so ein, dass es in die Rangfolge passt
    @Override
    public void addElement(Object obj)
    {
        if(!eintraege.contains(obj))
        {
            int i=0;
 
            
 
            eintraege.add(obj);
        }
    }
 
    // Hier entfernen wir ein Objekt aus der Liste
    public void removeElement(Object obj)
    {
        if(eintraege.contains(obj))
        {
            eintraege.remove(obj);
        }
    }
 
    // Hier fügen wir ein Element an einer bestimmten Position ein
    @Override
    public void insertElementAt(Object obj, int index)
    {
        eintraege.add(index, obj);
    }
 
    // Hier entfernen wir ein Element aus der Liste mit dem übergebenem Index
    @Override
    public void removeElementAt(int index)
    {
        if(eintraege.size()> index)
        {
            eintraege.removeElementAt(index);
        }
    }
    public void clear() {
        eintraege.clear();
    }
    
    @Override
    public void addListDataListener(ListDataListener ll) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeListDataListener(ListDataListener ll) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
