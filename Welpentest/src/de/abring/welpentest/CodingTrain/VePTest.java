/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.CodingTrain;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import de.abring.welpentest.farbbegrenzer.FarbbegrenzerPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javafx.scene.Cursor;

/**
 *
 * @author Bring
 */
public class VePTest extends javax.swing.JPanel implements WebcamListener, WindowListener, Thread.UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener {

    private BlobComboBoxModel blobModel = new BlobComboBoxModel();
    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private BlobTracking blobTracker = null;
    private final FarbbegrenzerPanel farbbegrenzerPanel;
    private final Dimension[] nonStandardResolutions = new Dimension[] {
        WebcamResolution.PAL.getSize(),   // you can use predefined resolution
        WebcamResolution.HD720.getSize(),
    };
    private GraphPanel test = new GraphPanel();
    private boolean record = false;
    
    private final Thread refreshBlobs = new Thread() {
            @Override
            public void run() {
                while(true) {
                    try {
                        sleep(10000);
                        if (blobTracker != null) {
                            blobModel.clear();
                            for (Blob b : blobTracker.getBlobs()) {
                                blobModel.addElement(b);
                            }
                        }
                        if (!blobTracker.getBlobs().contains(blobTracker.getTrackingBlob()))
                            blobModel.addElement(blobTracker.getTrackingBlob());
                        blobModel.setSelectedItem(blobTracker.getTrackingBlob());
                        if (blobTracker.getTrackingBlob().getId() == -1 && !blobTracker.getBlobs().isEmpty()) {
                            blobModel.setSelectedItem(blobTracker.getBlobs().get(0));
                        }
                        jCbxTrackingBlob.updateUI();
                    } catch(InterruptedException e) {

                    }
                }
            }
        };
    
    /**
     * Creates new form VePTest
     */
    public VePTest() {
        initComponents();
        farbbegrenzerPanel = new FarbbegrenzerPanel();
        blobTracker = new BlobTracking(farbbegrenzerPanel);
        blobModel.addElement(blobTracker.getTrackingBlob());
        picker = new WebcamPicker();
        picker.addItemListener(this);
        this.jPneVideo.add(picker, BorderLayout.NORTH);
        this.jPneVideo.add(farbbegrenzerPanel, BorderLayout.WEST);
        webcam = picker.getSelectedWebcam();

        this.jPneGraphen.add(this.jLblCrossBorder);
        this.jPneGraphen.add(test);
        
//        test.addPoint(new Point(100, 10));
//        test.addPoint(new Point(200, 5));
//        test.addPoint(new Point(250, 30));
//        test.addPoint(new Point(500, 80));
//        test.addPoint(new Point(300, 100));
        
        initWebcam(webcam);
        refreshBlobs.start();
        
        blobTracker.addListener(new MovementListener() {
            @Override
            public void movementPerformed(MovementEvent evt) {
                if (evt.getID() == MovementEvent.BORDER_CROSS_EVENT && evt.getSource() instanceof Point) {
                    test.addPoint((Point) evt.getSource());
                }
                
            }
        });
        
    }

    private void recStart() {
        
    }

    private void recStop() {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblCrossBorder = new javax.swing.JLabel();
        jLblTest1 = new javax.swing.JLabel();
        jLblTest2 = new javax.swing.JLabel();
        jLblTest3 = new javax.swing.JLabel();
        jSplitPane = new javax.swing.JSplitPane();
        jPneVideo = new javax.swing.JPanel();
        jPneVideoOptions = new javax.swing.JPanel();
        jCbsBW = new javax.swing.JCheckBox();
        jCbsShowCross = new javax.swing.JCheckBox();
        jCbsShowRectangle = new javax.swing.JCheckBox();
        jBtnSetGrid = new javax.swing.JButton();
        jPneRecord = new javax.swing.JPanel();
        jLblTrackingBlob = new javax.swing.JLabel();
        jCbxTrackingBlob = new javax.swing.JComboBox<>();
        jPneGraphen = new javax.swing.JPanel();
        jBtnRecord = new javax.swing.JButton();
        jSpnRecTime = new javax.swing.JSpinner();

        jLblCrossBorder.setText("Test:");

        jLblTest1.setText("Test:");

        jLblTest2.setText("Test:");

        jLblTest3.setText("Test:");

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jSplitPane.setDividerLocation(730);
        jSplitPane.setDividerSize(10);

        jPneVideo.setBorder(javax.swing.BorderFactory.createTitledBorder("Video"));
        jPneVideo.setLayout(new java.awt.BorderLayout(4, 4));

        jPneVideoOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPneVideoOptions.setMinimumSize(new java.awt.Dimension(30, 30));
        jPneVideoOptions.setPreferredSize(new java.awt.Dimension(597, 30));

        jCbsBW.setText("Do Black & White");
        jCbsBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsBWActionPerformed(evt);
            }
        });

        jCbsShowCross.setSelected(true);
        jCbsShowCross.setText("show Cross");
        jCbsShowCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsShowCrossActionPerformed(evt);
            }
        });

        jCbsShowRectangle.setText("show Rectangle");
        jCbsShowRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsShowRectangleActionPerformed(evt);
            }
        });

        jBtnSetGrid.setText("set Grid");
        jBtnSetGrid.setMaximumSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.setMinimumSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.setPreferredSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSetGridActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPneVideoOptionsLayout = new javax.swing.GroupLayout(jPneVideoOptions);
        jPneVideoOptions.setLayout(jPneVideoOptionsLayout);
        jPneVideoOptionsLayout.setHorizontalGroup(
            jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneVideoOptionsLayout.createSequentialGroup()
                .addComponent(jCbsBW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbsShowCross)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbsShowRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                .addComponent(jBtnSetGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPneVideoOptionsLayout.setVerticalGroup(
            jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCbsBW, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(jCbsShowCross)
                .addComponent(jCbsShowRectangle)
                .addComponent(jBtnSetGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPneVideo.add(jPneVideoOptions, java.awt.BorderLayout.PAGE_END);

        jSplitPane.setLeftComponent(jPneVideo);

        jPneRecord.setBorder(javax.swing.BorderFactory.createTitledBorder("Recording"));

        jLblTrackingBlob.setLabelFor(jCbxTrackingBlob);
        jLblTrackingBlob.setText("tracking Blob:");

        jCbxTrackingBlob.setModel(blobModel);
        jCbxTrackingBlob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbxTrackingBlobActionPerformed(evt);
            }
        });

        jPneGraphen.setBorder(javax.swing.BorderFactory.createTitledBorder("Graphen:"));
        jPneGraphen.setLayout(new javax.swing.BoxLayout(jPneGraphen, javax.swing.BoxLayout.PAGE_AXIS));

        jBtnRecord.setText("Start");
        jBtnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRecordActionPerformed(evt);
            }
        });

        jSpnRecTime.setValue((int) (120 * 1000));

        javax.swing.GroupLayout jPneRecordLayout = new javax.swing.GroupLayout(jPneRecord);
        jPneRecord.setLayout(jPneRecordLayout);
        jPneRecordLayout.setHorizontalGroup(
            jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCbxTrackingBlob, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPneGraphen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPneRecordLayout.createSequentialGroup()
                .addComponent(jLblTrackingBlob)
                .addGap(0, 160, Short.MAX_VALUE))
            .addComponent(jBtnRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSpnRecTime)
        );
        jPneRecordLayout.setVerticalGroup(
            jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneRecordLayout.createSequentialGroup()
                .addComponent(jLblTrackingBlob)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbxTrackingBlob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPneGraphen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpnRecTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnRecord)
                .addGap(0, 497, Short.MAX_VALUE))
        );

        jSplitPane.setRightComponent(jPneRecord);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 978, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCbsBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsBWActionPerformed
        this.blobTracker.setBw(this.jCbsBW.isSelected());
    }//GEN-LAST:event_jCbsBWActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (evt.getComponent().equals(this)) {
            this.jSplitPane.setDividerLocation(this.getSize().width - 400);
        }
    }//GEN-LAST:event_formComponentResized

    private void jCbsShowCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsShowCrossActionPerformed
        this.blobTracker.setPc(this.jCbsShowCross.isSelected());
    }//GEN-LAST:event_jCbsShowCrossActionPerformed

    private void jCbsShowRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsShowRectangleActionPerformed
        this.blobTracker.setPr(this.jCbsShowRectangle.isSelected());
    }//GEN-LAST:event_jCbsShowRectangleActionPerformed

    private void jBtnSetGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSetGridActionPerformed
        this.panel.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        this.blobTracker.resetGrid();
    }//GEN-LAST:event_jBtnSetGridActionPerformed

    private void jCbxTrackingBlobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbxTrackingBlobActionPerformed
        this.blobTracker.setTrackingBlob((Blob) blobModel.getSelectedItem());
    }//GEN-LAST:event_jCbxTrackingBlobActionPerformed

    private void jBtnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRecordActionPerformed
        this.record = !this.record;
        if (this.record) {
            this.jBtnRecord.setText("Stop");
            //Starte die Aufnahme
            this.recStart();
        } else {
            this.jBtnRecord.setText("Start");
            //Stop Record
            this.recStop();
        }
    }//GEN-LAST:event_jBtnRecordActionPerformed

    public void webcamOpen(WebcamEvent we) {
            System.out.println("webcam open");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
            System.out.println("webcam closed");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
            System.out.println("webcam disposed");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
            // do nothing
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
            webcam.close();
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
            System.out.println("webcam viewer resumed");
            panel.resume();
    }

    @Override
    public void windowIconified(WindowEvent e) {
            System.out.println("webcam viewer paused");
            panel.pause();
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
            System.err.println(String.format("Exception in thread %s", t.getName()));
            e.printStackTrace();
    }
    
    @Override
    public void webcamFound(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.addItem(event.getWebcam());
            }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.removeItem(event.getWebcam());
            }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {
                panel.stop();
                remove(panel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                
                initWebcam(webcam);
            
            }
        }
    }

    private Dimension getBiggestViewSize(Webcam webcam) {
        Dimension newSize = new Dimension(0, 0);
        for (Dimension size : webcam.getViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
        for (Dimension size : webcam.getCustomViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
	return newSize;			
    }
    
    private void initWebcam(Webcam webcam) {
        if (webcam == null) {
            System.exit(1);
        }
        
        webcam.setCustomViewSizes(nonStandardResolutions);
                                
        webcam.setViewSize(getBiggestViewSize(webcam));

        System.out.println("size: " + getBiggestViewSize(webcam));
        webcam.addWebcamListener(this);

        System.out.println("selected " + webcam.getName());

        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(false);
        panel.setPainter(blobTracker);
        panel.addMouseListener(blobTracker);

        this.jPneVideo.add(panel, BorderLayout.CENTER);
        updateUI();
        Thread t = new Thread() {

                @Override
                public void run() {
                        panel.start();
                }
        };
        t.setName("example-stoper");
        t.setDaemon(true);
        t.setUncaughtExceptionHandler(this);
        t.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnRecord;
    private javax.swing.JButton jBtnSetGrid;
    private javax.swing.JCheckBox jCbsBW;
    private javax.swing.JCheckBox jCbsShowCross;
    private javax.swing.JCheckBox jCbsShowRectangle;
    private javax.swing.JComboBox<String> jCbxTrackingBlob;
    private javax.swing.JLabel jLblCrossBorder;
    private javax.swing.JLabel jLblTest1;
    private javax.swing.JLabel jLblTest2;
    private javax.swing.JLabel jLblTest3;
    private javax.swing.JLabel jLblTrackingBlob;
    private javax.swing.JPanel jPneGraphen;
    private javax.swing.JPanel jPneRecord;
    private javax.swing.JPanel jPneVideo;
    private javax.swing.JPanel jPneVideoOptions;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JSpinner jSpnRecTime;
    // End of variables declaration//GEN-END:variables
}
