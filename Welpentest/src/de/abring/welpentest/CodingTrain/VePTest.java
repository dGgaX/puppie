/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.CodingTrain;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import de.abring.welpentest.farbbegrenzer.FarbbegrenzerPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 *
 * @author Bring
 */
public class VePTest extends javax.swing.JPanel implements WebcamListener, WindowListener, Thread.UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener {

    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private BlobTracking blobTracker;
    private final FarbbegrenzerPanel farbbegrenzerPanel;
    private final Dimension[] nonStandardResolutions = new Dimension[] {
        WebcamResolution.PAL.getSize(),   // you can use predefined resolution
        WebcamResolution.HD720.getSize(),
    };
    
    /**
     * Creates new form VePTest
     */
    public VePTest() {
        initComponents();
        farbbegrenzerPanel = new FarbbegrenzerPanel();
        blobTracker = new BlobTracking(farbbegrenzerPanel);	
        picker = new WebcamPicker();
        picker.addItemListener(this);

        webcam = picker.getSelectedWebcam();

        initWebcam(webcam);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void webcamOpen(WebcamEvent we) {
            System.out.println("webcam open");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
            System.out.println("webcam closed");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
            System.out.println("webcam disposed");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
            // do nothing
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
            webcam.close();
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
            System.out.println("webcam viewer resumed");
            panel.resume();
    }

    @Override
    public void windowIconified(WindowEvent e) {
            System.out.println("webcam viewer paused");
            panel.pause();
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
            System.err.println(String.format("Exception in thread %s", t.getName()));
            e.printStackTrace();
    }
    
    @Override
    public void webcamFound(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.addItem(event.getWebcam());
            }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.removeItem(event.getWebcam());
            }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {
                panel.stop();
                remove(panel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                
                initWebcam(webcam);
            
            }
        }
    }

    private Dimension getBiggestViewSize(Webcam webcam) {
        Dimension newSize = new Dimension(0, 0);
        for (Dimension size : webcam.getViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
        for (Dimension size : webcam.getCustomViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
	return newSize;			
    }
    
    private void initWebcam(Webcam webcam) {
        if (webcam == null) {
            System.exit(1);
        }
        
        webcam.setCustomViewSizes(nonStandardResolutions);
                                
        webcam.setViewSize(getBiggestViewSize(webcam));

        System.out.println("size: " + getBiggestViewSize(webcam));
        webcam.addWebcamListener(this);

        System.out.println("selected " + webcam.getName());

        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(false);
        panel.setPainter(blobTracker);

        add(panel, BorderLayout.CENTER);
        updateUI();
        Thread t = new Thread() {

                @Override
                public void run() {
                        panel.start();
                }
        };
        t.setName("example-stoper");
        t.setDaemon(true);
        t.setUncaughtExceptionHandler(this);
        t.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
