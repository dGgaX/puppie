/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.CodingTrain;

import com.github.sarxos.webcam.WebcamPanel;
import de.abring.welpentest.farbbegrenzer.FarbbegrenzerPanel;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import de.abring.welpentest.farbbegrenzer.Rectangle;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author Andreas
 */
public class BlobTracking implements WebcamPanel.Painter {

    private static final Image NO_IMAGE = getImage("image-missing-icon.png");
    private final FarbbegrenzerPanel farbbegrenzerPanel;
    
    private boolean bw = false;
    
    List<Blob> blobs = new ArrayList<>();
    
    /**
     *
     * @param farbbegrenzerPanel
     */
    public BlobTracking (FarbbegrenzerPanel farbbegrenzerPanel) {
        this.farbbegrenzerPanel = farbbegrenzerPanel;
    }
    
    @Override
    public void paintPanel(WebcamPanel wp, Graphics2D g2) {
    
        int w1 = wp.getSize().width;
        int h1 = wp.getSize().height;
        int w2 = NO_IMAGE.getWidth(null);
        int h2 = NO_IMAGE.getHeight(null);

        g2.setColor(wp.getBackground());
        g2.fillRect(0, 0, w1, h1);
        g2.drawImage(NO_IMAGE, (w1 - w2) / 2, (h1 - h2) / 2, null);}

    @Override
    public void paintImage(WebcamPanel wp, BufferedImage image, Graphics2D g2) {
        List<Blob> currentBlobs = new ArrayList<>();
        
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                Point cp = new Point(x, y);
                
            }
        }
    }
    
    private static Image getImage(String image) {
        try {
            return ImageIO.read(BlobTracking.class.getResource("/de/abring/welpentest/" + image));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private int RGBtoGray(int rgb) {
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);
        int grayLevel = (r + g + b) / 3;
        return (grayLevel << 16) + (grayLevel << 8) + grayLevel; 
    }
    
    private boolean isPointInRectangles (Point p, List<Rectangle> r) {
        return r.stream().anyMatch((area) -> (area.contains(p)));
    }

    /**
     * @return the bw
     */
    public boolean isBw() {
        return bw;
    }

    /**
     * @param bw the bw to set
     */
    public void setBw(boolean bw) {
        this.bw = bw;
    }
}
