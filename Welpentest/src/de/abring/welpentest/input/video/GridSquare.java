/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.input.video;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;

/**
 *
 * @author Karima
 */
public class GridSquare extends java.awt.Point{

    public static final int IS_NORMAL = 0;
    public static final int IS_ACTIVE = 1;
    public static final int IS_PREVIO = 2;
    
    private final Stroke strokeNormal = new BasicStroke(2, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[] { 5, 3, 1, 3 }, 0);
    private final Stroke strokeActive = new BasicStroke(4);
    private final Stroke strokePrevio = new BasicStroke(4);
    
    private final Color normal = new Color(173,216,230);
    private final Color active = new Color (255,64,64);
    private final Color previo = new Color(202,255,112);
    
    private Point[] p = new Point[4];
    
    
    /**
     *
     */
    public GridSquare() {
        super(0, 0);
        this.p[0] = new Point (0, 0);
        this.p[1] = new Point (0, 0);
        this.p[2] = new Point (0, 0);
        this.p[3] = new Point (0, 0);
    }

    /**
     *
     * @param p0
     * @param p1
     * @param p2
     * @param p3
     */
    public GridSquare(Point p0, Point p1, Point p2, Point p3) {
        super(0, 0);
        this.p[0] = p0;
        this.p[1] = p1;
        this.p[2] = p2;
        this.p[3] = p3;
        System.out.print(p[0]);
        System.out.print(p[1]);
        System.out.print(p[2]);
        System.out.print(p[3]);
        System.out.println();
    }
    
    public boolean contains(Point t) {
        int i, j;
        boolean c = false;
        for (i = 0, j = 3; i < 4; j = i++) {
        if ( ((p[i].y > t.y) != (p[j].y > t.y)) &&
            (t.x < (p[j].x-p[i].x) * (t.y-p[i].y) / (p[j].y-p[i].y) + p[i].x) )
            c = !c;
        }
        return c;
    }
    
    /**
     *
     * @param g2
     * @param state
     */
    public void paint(Graphics2D g2, int state) {
        switch (state) {
            case GridSquare.IS_NORMAL:
                g2.setStroke(strokeNormal);
                g2.setColor(this.normal);
                break;
            case GridSquare.IS_ACTIVE:
                g2.setStroke(strokeActive);
                g2.setColor(this.active);
                break;
            case GridSquare.IS_PREVIO:
                g2.setStroke(strokePrevio);
                g2.setColor(this.previo);
                break;
            default: 
                g2.setStroke(strokeNormal);
                g2.setColor(this.normal);
                break; 
        }
        g2.drawLine(p[0].x + x + 1, p[0].y + y + 1, p[1].x + x - 1, p[1].y + y + 1);
        g2.drawLine(p[1].x + x - 1, p[1].y + y + 1, p[2].x + x - 1, p[2].y + y - 1);
        g2.drawLine(p[2].x + x - 1, p[2].y + y - 1, p[3].x + x + 1, p[3].y + y - 1);
        g2.drawLine(p[3].x + x + 1, p[3].y + y - 1, p[0].x + x + 1, p[0].y + y + 1);
    }
}
