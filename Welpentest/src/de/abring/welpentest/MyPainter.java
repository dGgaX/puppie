/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest;

import com.github.sarxos.webcam.WebcamPanel;
import de.abring.welpentest.farbbegrenzer.FarbbegrenzerPanel;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import de.abring.welpentest.farbbegrenzer.Rectangle;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author Andreas
 */
public class MyPainter implements WebcamPanel.Painter {

    private static final Image NO_IMAGE = getImage("image-missing-icon.png");
    private final FarbbegrenzerPanel farbbegrenzerPanel;
    private final Stroke stroke = new BasicStroke(4, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0,
        new float[] { 5, 2 }, 0);
    BufferedImage lastImage;
        
    List<Rectangle> allAreas = new ArrayList<>();
    List<Rectangle> targetedAreas = new ArrayList<>();

    private boolean bw = false;
    private boolean pause = false;
    private int toleranz = 25;
    /**
     *
     * @param farbbegrenzerPanel
     */
    public MyPainter (FarbbegrenzerPanel farbbegrenzerPanel) {
        this.farbbegrenzerPanel = farbbegrenzerPanel;
        lastImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
    }
    
    @Override
    public void paintPanel(WebcamPanel wp, Graphics2D g2) {
    
        int w1 = wp.getSize().width;
        int h1 = wp.getSize().height;
        int w2 = NO_IMAGE.getWidth(null);
        int h2 = NO_IMAGE.getHeight(null);

        g2.setColor(wp.getBackground());
        g2.fillRect(0, 0, w1, h1);
        g2.drawImage(NO_IMAGE, (w1 - w2) / 2, (h1 - h2) / 2, null);}

    @Override
    public void paintImage(WebcamPanel wp, BufferedImage image, Graphics2D g2) {
        allAreas.clear();
        targetedAreas.clear();
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                Point cp = new Point(x, y);
                int rgb = image.getRGB(x, y);
                if (farbbegrenzerPanel.isInRange(rgb)) {
                    if (bw)
                        image.setRGB(x, y, Color.WHITE.getRGB());
                    
                    boolean found = false;
                    for (Rectangle area : allAreas) {
                        if (area.nearBy(cp, 75)) {
                            area.add(cp);
                            found = true;
                            break;
                        }
                    }

                    if (!found) {
                      Rectangle area = new Rectangle(0, 0, 1, 1);
                      area.setLocation(cp);
                      allAreas.add(area);
                    }
                } else {
                    if (bw)
                        image.setRGB(x, y, Color.BLACK.getRGB());
//                    else
//                        image.setRGB(x, y, this.RGBtoGray(rgb));
                }
            }
        }

        allAreas.forEach((a) -> {
            if(a.size() >= 1000) 
            targetedAreas.add(a);
        });
        int w1 = wp.getSize().width;
        int h1 = wp.getSize().height;
        int w2 = image.getWidth();
        int h2 = image.getHeight();

        final int px = (w1 - w2) / 2;
        final int py = (h1 - h2) / 2;
        g2.drawImage(image, px, py, null);

        g2.setColor(Color.MAGENTA);
        g2.setStroke(stroke);
        targetedAreas.forEach((a) -> {
            a.translate(px, py);
            g2.drawLine(a.center().x - 20, a.center().y, a.center().x + 20, a.center().y);
            g2.drawLine(a.center().x, a.center().y - 20, a.center().x, a.center().y + 20);
        });
        
//        lastImage = image2;
//        g2.drawImage(lastImage, null, 0, 0);
        image.flush();

        //lastImage = image;


    }
    
    private static Image getImage(String image) {
        try {
            return ImageIO.read(MyPainter.class.getResource("/de/abring/welpentest/" + image));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    
    private void expandArea(Rectangle r, BufferedImage i, Point p) {
        Rectangle id = new Rectangle(0, 0, i.getWidth(), i.getHeight());
        if (!id.contains(p))
            return;
        if (r.contains(p))
            return;
        
        try {
            int rgb = i.getRGB(p.x, p.y);
            if (farbbegrenzerPanel.isInRange(rgb)) {
                r.add(new Rectangle(p.x, p.y, 1, 1));

                for(int t = 1; t <= toleranz; t++) {
                    //expand up
                    Point up = (Point) p.clone();
                    up.x = up.x - t;
                    expandArea(r, i, up);
                    //expand left
                    Point lp = (Point) p.clone();
                    lp.x = lp.x + t;
                    expandArea(r, i, lp);
                    //expand right
                    Point rp = (Point) p.clone();
                    rp.x = rp.x + t;
                    expandArea(r, i, rp);
                    //expand down
                    Point dp = (Point) p.clone();
                    dp.y = dp.y + t;
                    expandArea(r, i, dp);
                }
            }
        } catch(Exception e) {
            System.err.print(e);
        }
    }
    
    private int RGBtoGray(int rgb) {
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);
        int grayLevel = (r + g + b) / 3;
        return (grayLevel << 16) + (grayLevel << 8) + grayLevel; 
    }
    
    private boolean isPointInRectangles (Point p, List<Rectangle> r) {
        return r.stream().anyMatch((area) -> (area.contains(p)));
    }

    /**
     * @return the bw
     */
    public boolean isBw() {
        return bw;
    }

    /**
     * @param bw the bw to set
     */
    public void setBw(boolean bw) {
        this.bw = bw;
    }

    /**
     * @return the toleranz
     */
    public int getToleranz() {
        return toleranz;
    }

    /**
     * @param toleranz the toleranz to set
     */
    public void setToleranz(int toleranz) {
        this.toleranz = toleranz;
    }

    /**
     * @return the pause
     */
    public boolean isPause() {
        return pause;
    }

    /**
     * @param pause the pause to set
     */
    public void setPause(boolean pause) {
        this.pause = pause;
    }
                                    
}
