/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.gui.panes;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Karima
 */
public class GraphPanel extends javax.swing.JPanel {

    public static final int DIRECT_GRAPH    = 0;
    public static final int SQUARE_GRAPH    = 1;
    public static final int BAR_GRAPH       = 2;
    
    private int maxX = 0;
    private int maxY = 0;
    
    private int graphType = GraphPanel.DIRECT_GRAPH;
    
    private Stroke stroke = new BasicStroke(2);
    
    private Color backGroundColor = Color.WHITE;
    private Color color = Color.RED;
    private Color gridColor = Color.BLACK;
    
    private String xUnitName = "";
    private String xUnitSympol = "";
    private String yUnitName = "";
    private String yUnitSympol = "";
    
    private final int xGrid = 40;
    private final int yGrid = 20;
    
    private final List<Point> ticks = new ArrayList<>();
    
    /**
     * Creates new form GraphPanel2
     */
    public GraphPanel() {
        initComponents();
    }
    
    /**
     *
     * @param p
     */
    public void addPoint(Point p) {
        if (p == null || p.x < 0 || p.y < 0) 
            return;
        
        maxX = Math.max(maxX, p.x);
        maxY = Math.max(maxY, p.y);
        ticks.add(p);
        
        Collections.sort(ticks, (Point lhs, Point rhs) -> lhs.x < rhs.x ? -1 : (lhs.x > rhs.x) ? 1 : 0);
        this.updateUI();
    }
    
    /**
     *
     * @return
     */
    public int getDataMaxValue() {
        int i = 0;
        for (Point p : ticks) {
            i = Math.max(i, p.y);
        }
        return i;
    }
    
    /**
     *
     * @return
     */
    public float getDataAVG() {
        float i = 0.0f;
        for (Point p : ticks) {
            i += p.y;
        }
        return i / ticks.size();
    }
    
    /**
     *
     */
    public void clear() {
        maxX = 0;
        maxY = 0;
        ticks.clear();
    }
    
    /**
     *
     * @param g
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
	if (stroke != null)
            g2.setStroke(stroke);
        g2.setBackground(backGroundColor);
        g2.clearRect(0, 0, this.getWidth(), this.getHeight());
        g2.setColor(gridColor);
        
        g2.drawLine(Math.round(xGrid * this.getWidth() / (float) maxX), Math.round(this.getHeight() - yGrid * this.getHeight() / (float) maxY), Math.round(xGrid * this.getWidth() / (float) maxX), Math.round(this.getHeight() - 0 * this.getHeight() / (float) maxY));
        g2.drawLine(Math.round(xGrid * this.getWidth() / (float) maxX), Math.round(this.getHeight() - yGrid * this.getHeight() / (float) maxY), Math.round(0 * this.getWidth() / (float) maxX), Math.round(this.getHeight() - yGrid * this.getHeight() / (float) maxY));
        
        if (ticks.isEmpty())
            return;
        g2.setColor(color);
        Point l = ticks.get(0);
        try {     
            switch(graphType) {
                case GraphPanel.DIRECT_GRAPH:
                    for (Point p : ticks) {
                        g2.drawLine(Math.round(l.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - l.y * this.getHeight() / (float) maxY), Math.round(p.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - p.y * this.getHeight() / (float) maxY));
                        l = p;
                    }
                    break;
                case GraphPanel.SQUARE_GRAPH:
                    for (Point p : ticks) {
                        g2.drawLine(Math.round(l.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - l.y * this.getHeight() / (float) maxY), Math.round(p.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - l.y * this.getHeight() / (float) maxY));
                        g2.drawLine(Math.round(p.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - l.y * this.getHeight() / (float) maxY), Math.round(p.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - p.y * this.getHeight() / (float) maxY));
                        l = p;
                    }
                    break;
                case GraphPanel.BAR_GRAPH:
                    for (Point p : ticks) {
                        g2.drawLine(Math.round(p.x * this.getWidth() / (float) maxX), this.getHeight(), Math.round(p.x * this.getWidth() / (float) maxX), Math.round(this.getHeight() - p.y * this.getHeight() / (float) maxY));
                    }
                    break;
            }
        } catch (java.util.ConcurrentModificationException ex) {
            System.err.println("Graph Paint Error! EGAL!!!");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(4000, 2000));
        setMinimumSize(new java.awt.Dimension(50, 50));
        setPreferredSize(new java.awt.Dimension(200, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 104, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * @return the stroke
     */
    public Stroke getStroke() {
        return stroke;
    }

    /**
     * @param stroke the stroke to set
     */
    public void setStroke(Stroke stroke) {
        this.stroke = stroke;
    }

    /**
     * @return the backGroundColor
     */
    public Color getBackGroundColor() {
        return backGroundColor;
    }

    /**
     * @param backGroundColor the backGroundColor to set
     */
    public void setBackGroundColor(Color backGroundColor) {
        this.backGroundColor = backGroundColor;
    }

    /**
     * @return the color
     */
    public Color getColor() {
        return color;
    }

    /**
     * @param color the color to set
     */
    public void setColor(Color color) {
        this.color = color;
    }

    /**
     * @return the graphType
     */
    public int getGraphType() {
        return graphType;
    }

    /**
     * @param graphType the graphType to set
     */
    public void setGraphType(int graphType) {
        this.graphType = graphType;
    }

    /**
     * @return the maxX
     */
    public int getMaxX() {
        return maxX;
    }

    /**
     * @param maxX the maxX to set
     */
    public void setMaxX(int maxX) {
        this.maxX = maxX;
    }

    /**
     * @return the maxY
     */
    public int getMaxY() {
        return maxY;
    }

    /**
     * @param maxY the maxY to set
     */
    public void setMaxY(int maxY) {
        this.maxY = maxY;
    }

    /**
     * @return the ticks
     */
    public List<Point> getData() {
        return ticks;
    }

    /**
     * @return the xUnitName
     */
    public String getxUnitName() {
        return xUnitName;
    }

    /**
     * @param xUnitName the xUnitName to set
     */
    public void setxUnitName(String xUnitName) {
        this.xUnitName = xUnitName;
    }

    /**
     * @return the xUnitSympol
     */
    public String getxUnitSympol() {
        return xUnitSympol;
    }

    /**
     * @param xUnitSympol the xUnitSympol to set
     */
    public void setxUnitSympol(String xUnitSympol) {
        this.xUnitSympol = xUnitSympol;
    }

    /**
     * @return the yUnitName
     */
    public String getyUnitName() {
        return yUnitName;
    }

    /**
     * @param yUnitName the yUnitName to set
     */
    public void setyUnitName(String yUnitName) {
        this.yUnitName = yUnitName;
    }

    /**
     * @return the yUnitSympol
     */
    public String getyUnitSympol() {
        return yUnitSympol;
    }

    /**
     * @param yUnitSympol the yUnitSympol to set
     */
    public void setyUnitSympol(String yUnitSympol) {
        this.yUnitSympol = yUnitSympol;
    }

    /**
     * @return the gridColor
     */
    public Color getGridColor() {
        return gridColor;
    }

    /**
     * @param gridColor the gridColor to set
     */
    public void setGridColor(Color gridColor) {
        this.gridColor = gridColor;
    }
}
