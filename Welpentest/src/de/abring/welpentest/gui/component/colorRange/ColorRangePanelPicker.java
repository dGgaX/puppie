/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.gui.component.colorRange;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JColorChooser;

/**
 *
 * @author Andreas
 */
public class ColorRangePanelPicker extends javax.swing.JPanel {

    private boolean execute = true;
    private final List<ColorChangeListener> listeners = new ArrayList<>();
    /**
     * Creates new form FarbbegrenzerPanel
     */
    public ColorRangePanelPicker() {
        initComponents();
    }
    
    public ColorRange getColorRange() {
        return new ColorRange(this.jBtnColor1.getBackground(), this.jBtnColor2.getBackground());
    }
    
    public void setColorRange(ColorRange colorRange) {
        boolean tempExecute = execute;
        execute = false;
        this.jBtnColor1.setBackground(colorRange.getColor1());
        this.jBtnColor2.setBackground(colorRange.getColor2());
        execute = tempExecute;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnColor2 = new javax.swing.JButton();
        jBtnColor1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.GridLayout(0, 1));

        jBtnColor2.setBorder(null);
        jBtnColor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnColor2ActionPerformed(evt);
            }
        });
        add(jBtnColor2);

        jBtnColor1.setBorder(null);
        jBtnColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnColor1ActionPerformed(evt);
            }
        });
        add(jBtnColor1);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnColor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnColor2ActionPerformed
        Color color1 = this.jBtnColor1.getBackground();
        Color color2 = JColorChooser.showDialog(this, "Choose the lower Color", this.jBtnColor2.getBackground());
        
        if (color2 == null)
            return;
        
        int red = Math.max(color1.getRed(), color2.getRed());
        int green = Math.max(color1.getGreen(), color2.getGreen());
        int blue = Math.max(color1.getBlue(), color2.getBlue());
        
        this.jBtnColor2.setBackground(new Color(red, green, blue));
        executeColorChange();
    }//GEN-LAST:event_jBtnColor2ActionPerformed

    private void jBtnColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnColor1ActionPerformed
        Color color1 = JColorChooser.showDialog(this, "Choose the upper Color", this.jBtnColor1.getBackground());
        Color color2 = this.jBtnColor2.getBackground();
        
        if (color1 == null)
            return;
        
        int red = Math.min(color1.getRed(), color2.getRed());
        int green = Math.min(color1.getGreen(), color2.getGreen());
        int blue = Math.min(color1.getBlue(), color2.getBlue());
        
        this.jBtnColor1.setBackground(new Color(red, green, blue));
        executeColorChange();
    }//GEN-LAST:event_jBtnColor1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnColor1;
    private javax.swing.JButton jBtnColor2;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the execute
     */
    public boolean isExecute() {
        return execute;
    }

    /**
     * @param execute the execute to set
     */
    public void setExecute(boolean execute) {
        this.execute = execute;
    }
    
    /**
     * All the MovementListeners
     * @param toAdd 
     */
    public void addListener(ColorChangeListener toAdd) {
        listeners.add(toAdd);
    }
    
    public void removeListener(ColorChangeListener toRemove) {
        listeners.remove(toRemove);
    }

    public void executeColorChange() {
        if (!execute)
            return;
        boolean tempExecute = execute;
        execute = false;
        ColorChangeEvent evt = new ColorChangeEvent(getColorRange(), ColorChangeEvent.COLOR_CHANGED);
        listeners.forEach((hl) -> {
            hl.colorChanged(evt);
        });
        execute = tempExecute;
    }
}
