/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.gui.component.colorRange;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import static java.awt.GraphicsDevice.WindowTranslucency.TRANSLUCENT;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Karima
 */
public final class ColorRangePanelMousePickerOverlay extends javax.swing.JDialog {
    private Color color = Color.WHITE;
    /**
     * Creates new form Overlay
     * @param parent
     * @param modal
     * @param parts
     */
    public ColorRangePanelMousePickerOverlay(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setUndecorated(true); 
        initComponents();
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();
        if (gd.isWindowTranslucencySupported(TRANSLUCENT)) {
            setOpacity(0.01f);
        }
        
        setBounds(overallScreeSize());
        setVisible(true);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPntPne = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setName("overlay"); // NOI18N
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jPntPne.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPntPneMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPntPneLayout = new javax.swing.GroupLayout(jPntPne);
        jPntPne.setLayout(jPntPneLayout);
        jPntPneLayout.setHorizontalGroup(
            jPntPneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 836, Short.MAX_VALUE)
        );
        jPntPneLayout.setVerticalGroup(
            jPntPneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 449, Short.MAX_VALUE)
        );

        getContentPane().add(jPntPne, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPntPneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPntPneMousePressed

    }//GEN-LAST:event_jPntPneMousePressed

    private void jPntPneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPntPneMouseReleased
    }//GEN-LAST:event_jPntPneMouseReleased

    private void jPntPneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPntPneMouseDragged
    }//GEN-LAST:event_jPntPneMouseDragged

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    private void jPntPneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPntPneMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            Point point = evt.getPoint();
            BufferedImage image = getScreenshot();
            int rgb = image.getRGB(point.x, point.y);
            
            int r = (rgb >> 16) & 0xFF;
            int g = (rgb >> 8) & 0xFF;
            int b = (rgb & 0xFF);
        
            color = new Color(r, g, b);
            this.dispose();
        }
    }//GEN-LAST:event_jPntPneMouseClicked

    public static Rectangle overallScreeSize() {
        Rectangle overallBounds = new Rectangle(new Dimension(0,0));
//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        Rectangle rect = new Rectangle(screenSize);
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gs = ge.getScreenDevices();
        for(GraphicsDevice curGs : gs) {
            GraphicsConfiguration[] gc = curGs.getConfigurations();
            for(GraphicsConfiguration curGc : gc) {
                Rectangle bounds = curGc.getBounds();
                overallBounds.add(bounds);
//                try {
//                    Robot robot = new Robot();
//                    BufferedImage currentScreen = robot.createScreenCapture(bounds);
//                    String screenID = curGc.getDevice().getIDstring().replaceAll("([a-zA-Z]:)?(\\\\[a-zA-Z._-]+)+\\\\?", "");
//                    File saveFile = new File(System.getProperty("user.home") + System.getProperty("file.separator") + dateString + "-" + screenID + "." + endung);
//                    ImageIO.write(currentScreen, endung, saveFile);
//                } catch (AWTException | IOException ex) {
//                    Logger.getLogger(Snippet.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
        }
        return overallBounds;
    }
    
    /**
     *
     * @return BufferedImage
     */
    public BufferedImage getScreenshot() {
//        String endung = "jpg";
//        LocalDateTime date = LocalDateTime.now();
//        String dateString = date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss-SSS"));
        Rectangle bounds = overallScreeSize();

        try {
            Robot robot = new Robot();
            BufferedImage currentScreen = robot.createScreenCapture(bounds);
//            File saveFile = new File(System.getProperty("user.home") + System.getProperty("file.separator") + dateString + "." + endung);
//            ImageIO.write(currentScreen, endung, saveFile);
            return currentScreen;
        } catch (AWTException ex) {
            Logger.getLogger(ColorRangePanelMousePickerOverlay.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * @return the color
     */
    public Color getColor() {
        return color;
    }

    /**
     * @param color the color to set
     */
    public void setColor(Color color) {
        this.color = color;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPntPne;
    // End of variables declaration//GEN-END:variables
}
