/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.gui.component.colorRange;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Andreas
 */
public class ColorRangePanelMousePicker extends javax.swing.JPanel {

    private boolean execute = true;
    private final List<ColorChangeListener> listeners = new ArrayList<>();
    private Color mainColor = Color.RED;
    /**
     * Creates new form FarbbegrenzerPanel
     */
    public ColorRangePanelMousePicker() {
        initComponents();
    }
    
    public ColorRange getColorRange() {
        int color = mainColor.getRGB();
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = (color & 0xFF);
        int x = Math.round((255.0f * (float) this.jSldRange.getValue()) / 100.0f);
        //Min.
        Color color1 = new Color (Math.max(0, r - x), Math.max(0, g - x), Math.max(0, b - x));
        //Max.
        Color color2 = new Color (Math.min(255, r + x), Math.min(255, g + x), Math.min(255, b + x));
        return new ColorRange(color1, color2);
    }
    
    public void setColorRange(ColorRange colorRange) {
        boolean tempExecute = execute;
        execute = false;
        
        //get best-matching Color
        
        execute = tempExecute;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSldRange = new javax.swing.JSlider();
        jLblRange = new javax.swing.JLabel();
        jBtnPickColor = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.GridBagLayout());

        jSldRange.setOrientation(javax.swing.JSlider.VERTICAL);
        jSldRange.setToolTipText("");
        jSldRange.setValue(10);
        jSldRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSldRangeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(38, 0, 38, 0);
        add(jSldRange, gridBagConstraints);

        jLblRange.setText("10 %");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLblRange, gridBagConstraints);

        jBtnPickColor.setText("PColor");
        jBtnPickColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPickColorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jBtnPickColor, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jSldRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSldRangeStateChanged
        this.jLblRange.setText(String.valueOf(this.jSldRange.getValue()) + " %");
        executeColorChange();
    }//GEN-LAST:event_jSldRangeStateChanged

    private void jBtnPickColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPickColorActionPerformed
        ColorRangePanelMousePickerOverlay ncl = new ColorRangePanelMousePickerOverlay(null, true);     
        mainColor = ncl.getColor();
        this.jBtnPickColor.setBackground(mainColor);
        executeColorChange();
    }//GEN-LAST:event_jBtnPickColorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnPickColor;
    private javax.swing.JLabel jLblRange;
    private javax.swing.JSlider jSldRange;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the execute
     */
    public boolean isExecute() {
        return execute;
    }

    /**
     * @param execute the execute to set
     */
    public void setExecute(boolean execute) {
        this.execute = execute;
    }
    
    /**
     * All the MovementListeners
     * @param toAdd 
     */
    public void addListener(ColorChangeListener toAdd) {
        listeners.add(toAdd);
    }
    
    public void removeListener(ColorChangeListener toRemove) {
        listeners.remove(toRemove);
    }

    public void executeColorChange() {
        if (!execute)
            return;
        boolean tempExecute = execute;
        execute = false;
        ColorChangeEvent evt = new ColorChangeEvent(getColorRange(), ColorChangeEvent.COLOR_CHANGED);
        listeners.forEach((hl) -> {
            hl.colorChanged(evt);
        });
        execute = tempExecute;
    }
}
