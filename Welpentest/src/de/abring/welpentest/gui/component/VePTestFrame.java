/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest.gui.component;

import de.abring.welpentest.gui.panes.GraphPanel;
import de.abring.welpentest.input.audio.AudioTracker;
import de.abring.welpentest.input.audio.AudioListener;
import de.abring.welpentest.input.audio.AudioEvent;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import de.abring.welpentest.gui.component.colorRange.ColorRange;
import de.abring.welpentest.gui.component.colorRange.ColorRangePanel;
import de.abring.welpentest.data.tests.VePTestData;
import de.abring.welpentest.input.video.Blob;
import de.abring.welpentest.gui.model.BlobComboBoxModel;
import de.abring.welpentest.input.video.BlobTracking;
import de.abring.welpentest.input.video.MovementEvent;
import de.abring.welpentest.input.video.MovementListener;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import static java.lang.Thread.sleep;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 *
 * @author Bring
 */
public class VePTestFrame extends javax.swing.JInternalFrame implements WebcamListener, InternalFrameListener, Thread.UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener {
    
    
    /**
     * Creates new form VePTestFrame
     */
    
    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private BlobTracking blobTracker = null;
    private AudioTracker audioTracker = null;
    
    private BlobComboBoxModel blobModel;
    
    private final ColorRangePanel colorRangePanel;
    private final Dimension[] nonStandardResolutions = new Dimension[] {
        WebcamResolution.PAL.getSize(),   // you can use predefined resolution
        WebcamResolution.HD720.getSize(),
    };
    private GraphPanel graphCrossBorder = new GraphPanel();
    private GraphPanel graphMovement = new GraphPanel();
    private GraphPanel graphMovementStemp = new GraphPanel();
    private GraphPanel graphNoice = new GraphPanel();
    private GraphPanel graphNoiceStemp = new GraphPanel();
    
    private boolean record = false;
    
    Thread recording = null;
    
    private final Thread refreshBlobs = new Thread() {
        @Override
        public void run() {
            while(true) {
                try {
                    sleep(5000);
                    if (!blobTracker.getBlobs().contains(blobTracker.getTrackingBlob()))
                        blobModel.addElement(blobTracker.getTrackingBlob());
                    blobModel.setSelectedItem(blobTracker.getTrackingBlob());
                    if (blobTracker.getTrackingBlob().getId() == -1 && !blobTracker.getBlobs().isEmpty()) {
                        blobModel.setSelectedItem(blobTracker.getBlobs().get(0));
                    }
                    jCbxTrackingBlob.updateUI();
                } catch(InterruptedException e) {

                }
            }
        }
    };
    private final VePTestData vTestData = new VePTestData();
    
    /**
     * Creates new form VePTest
     * @param vTestData
     * @param mainPageFrame
     */
    public VePTestFrame() {
        this.addInternalFrameListener(this);
        audioTracker = new AudioTracker();
        colorRangePanel = new ColorRangePanel(new ColorRange(new Color(127, 0, 0), new Color(255, 80, 80)));
        blobTracker = new BlobTracking(colorRangePanel);
        blobModel = new BlobComboBoxModel(blobTracker.getBlobs());
        blobModel.addElement(blobTracker.getTrackingBlob());
        initComponents();
        picker = new WebcamPicker();
        picker.addItemListener(this);
        this.jPneVideo.add(picker, BorderLayout.NORTH);
        this.jPneVideo.add(colorRangePanel, BorderLayout.WEST);
        webcam = picker.getSelectedWebcam();

        this.jLblCrossBorder.setAlignmentX(Component.LEFT_ALIGNMENT);
        this.jLblMovement.setAlignmentX(Component.LEFT_ALIGNMENT);
        this.jLblMovementStemp.setAlignmentX(Component.LEFT_ALIGNMENT);
        this.jLblNoice.setAlignmentX(Component.LEFT_ALIGNMENT);
        this.jLblNoiceStemp.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        graphCrossBorder.setGraphType(GraphPanel.DIRECT_GRAPH);
        graphCrossBorder.setMaxY(50);
        graphCrossBorder.setMaxX(120000);
        this.jPneGraphen.add(this.jLblCrossBorder);
        this.jPneGraphen.add(graphCrossBorder);
        
        graphMovement.setGraphType(GraphPanel.DIRECT_GRAPH);
        graphMovement.setMaxY(100);
        graphMovement.setMaxX(120000);
        this.jPneGraphen.add(this.jLblMovement);
        this.jPneGraphen.add(graphMovement);
        
        graphMovementStemp.setGraphType(GraphPanel.SQUARE_GRAPH);
        graphMovementStemp.setMaxY(3);
        graphMovementStemp.addPoint(new Point(0, 1));
        graphMovementStemp.setMaxX(120000);
        this.jPneGraphen.add(this.jLblMovementStemp);
        this.jPneGraphen.add(graphMovementStemp);
        
        graphNoice.setGraphType(GraphPanel.BAR_GRAPH);
        graphNoice.setMaxY(2000);
        graphNoice.setMaxX(120000);
        this.jPneGraphen.add(this.jLblNoice);
        this.jPneGraphen.add(graphNoice);
        
        graphNoiceStemp.setGraphType(GraphPanel.SQUARE_GRAPH);
        graphNoiceStemp.setMaxY(3);
        graphNoiceStemp.addPoint(new Point(0, 1));
        graphNoiceStemp.setMaxX(120000);
        this.jPneGraphen.add(this.jLblNoiceStemp);
        this.jPneGraphen.add(graphNoiceStemp);
        
        initWebcam(webcam);
        refreshBlobs.start();
        
        blobTracker.addListener(new MovementListener() {
            @Override
            public void movementPerformed(MovementEvent evt) {
                if (record && evt.getID() == MovementEvent.BORDER_CROSS_EVENT && evt.getSource() instanceof Point) {
                    graphCrossBorder.addPoint((Point) evt.getSource());
                    jLblCrossBorder.setText("Border Crossed: " + String.valueOf(graphCrossBorder.getDataMaxValue()) + " x.");
                } else if (record && evt.getID() == MovementEvent.MOVEMENT_EVENT && evt.getSource() instanceof Point) {
                    graphMovement.addPoint((Point) evt.getSource());
                    jLblMovement.setText("Movement: " + String.valueOf(graphMovement.getDataMaxValue()) + " px.");
                } else if (record && evt.getID() == MovementEvent.MOVEMENT_STEMP_EVENT && evt.getSource() instanceof Point) {
                    graphMovementStemp.addPoint((Point) evt.getSource());
                    jLblMovementStemp.setText("AVG Movement: " + String.valueOf(Math.round((graphMovementStemp.getDataAVG() - 1) * 10000) / 100) + " %.");
                }
                
            }
        });
        
        audioTracker.addListener(new AudioListener() {
            @Override
            public void audioDetected(AudioEvent evt) {
                if (record && evt.getID() == AudioEvent.NOICE_EVENT && evt.getSource() instanceof Point) {
                    graphNoice.addPoint((Point) evt.getSource());
                    jLblNoice.setText("Max-Noice: " + String.valueOf(graphNoice.getDataMaxValue()) + " #.");
                } else if (record && evt.getID() == AudioEvent.NOICE_STEMP_EVENT && evt.getSource() instanceof Point) {
                    graphNoiceStemp.addPoint((Point) evt.getSource());
                    jLblNoiceStemp.setText("AVG Noice: " + String.valueOf(Math.round((graphNoiceStemp.getDataAVG() - 1) * 10000) / 100) + " %.");
                }
                
            }
        });
        
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/de/abring/welpentest/gui/images/Logo64.png")));
    
        panel.pause();

    }

    private void recStart() {
        
        int duration = (int) jSpnRecTime.getValue();
        this.blobTracker.resetThreads();
        this.audioTracker.resetThreads();
        
        this.graphCrossBorder.clear();
        graphCrossBorder.setMaxY(50);
        graphCrossBorder.setMaxX(duration * 1000);
        graphCrossBorder.updateUI();
        
        this.graphMovement.clear();
        graphMovement.setMaxY(200);
        graphMovement.setMaxX(duration * 1000);
        graphMovement.updateUI();
        
        this.graphMovementStemp.clear();
        graphMovementStemp.addPoint(new Point(0, 1));
        graphMovementStemp.setMaxY(3);
        graphMovementStemp.setMaxX(duration * 1000);
        graphMovementStemp.updateUI();
        
        this.graphNoice.clear();
        graphNoice.setMaxY(2000);
        graphNoice.setMaxX(duration * 1000);
        graphNoice.updateUI();
        
        this.graphNoiceStemp.clear();
        graphNoiceStemp.setMaxY(3);
        graphNoiceStemp.addPoint(new Point(0, 1));
        graphNoiceStemp.setMaxX(duration * 1000);
        graphNoiceStemp.updateUI();
        
        this.jPneRecTime.remove(this.jSpnRecTime);
        this.jPneRecTime.add(this.jLblRecTime);
        this.jPneRecTime.updateUI();
        long start = Math.round(System.currentTimeMillis() / 1000.0d) + duration;
        recording = new Thread() {
            @Override
            public void run() {
                boolean running = true;
                while(running) {
                    try {
                        sleep(500);
                        long diff = start - Math.round(System.currentTimeMillis() / 1000.0d);
                        if (diff < 0)
                            recStop();
                        jLblRecTime.setText(String.valueOf(diff + 1) + " sec.");
                        jSpnRecTime.updateUI();
                    } catch(InterruptedException e) {
                        running = false;
                        jPneRecTime.remove(jLblRecTime);
                        jPneRecTime.add(jSpnRecTime);
                        jPneRecTime.updateUI();
                        jBtnRecord.setText("Start");
                        record = false;
                    }
                }
            }
        };
        recording.start();
    }

    private void recStop() {
        if (recording != null);
            recording.interrupt();
            
        this.vTestData.setCrossBorder(this.graphCrossBorder.getData());
        this.vTestData.setMovement(this.graphMovement.getData());
        this.vTestData.setMovementAVG(this.graphMovementStemp.getData());
        this.vTestData.setNoice(this.graphNoice.getData());
        this.vTestData.setNoiceAVG(this.graphNoiceStemp.getData());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblCrossBorder = new javax.swing.JLabel();
        jLblRecTime = new javax.swing.JLabel();
        jLblNoiceStemp = new javax.swing.JLabel();
        jLblNoice = new javax.swing.JLabel();
        jLblMovementStemp = new javax.swing.JLabel();
        jLblMovement = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane = new javax.swing.JSplitPane();
        jPneVideo = new javax.swing.JPanel();
        jPneVideoOptions = new javax.swing.JPanel();
        jCbsBW = new javax.swing.JCheckBox();
        jCbsShowCross = new javax.swing.JCheckBox();
        jCbsShowRectangle = new javax.swing.JCheckBox();
        jBtnSetGrid = new javax.swing.JButton();
        jSclPneVideo = new javax.swing.JScrollPane();
        jPneRecord = new javax.swing.JPanel();
        jLblTrackingBlob = new javax.swing.JLabel();
        jCbxTrackingBlob = new javax.swing.JComboBox<>();
        jSclPneGraphen = new javax.swing.JScrollPane();
        jPneGraphen = new javax.swing.JPanel();
        jPneRecTime = new javax.swing.JPanel();
        jSpnRecTime = new javax.swing.JSpinner();
        jBtnRecord = new javax.swing.JButton();
        jBtnSaveData = new javax.swing.JButton();

        jLblCrossBorder.setText("CrossBorder:");
        jLblCrossBorder.setMaximumSize(new java.awt.Dimension(2000, 20));
        jLblCrossBorder.setMinimumSize(new java.awt.Dimension(63, 20));
        jLblCrossBorder.setPreferredSize(new java.awt.Dimension(63, 20));

        jLblRecTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblRecTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLblNoiceStemp.setText("NoiceStemp:");
        jLblNoiceStemp.setMaximumSize(new java.awt.Dimension(2000, 20));
        jLblNoiceStemp.setMinimumSize(new java.awt.Dimension(60, 20));
        jLblNoiceStemp.setPreferredSize(new java.awt.Dimension(60, 20));

        jLblNoice.setText("Noice:");
        jLblNoice.setMaximumSize(new java.awt.Dimension(2000, 20));
        jLblNoice.setMinimumSize(new java.awt.Dimension(30, 20));
        jLblNoice.setPreferredSize(new java.awt.Dimension(30, 20));

        jLblMovementStemp.setText("MovementStemp:");
        jLblMovementStemp.setMaximumSize(new java.awt.Dimension(2000, 20));
        jLblMovementStemp.setMinimumSize(new java.awt.Dimension(84, 20));
        jLblMovementStemp.setPreferredSize(new java.awt.Dimension(84, 20));

        jLblMovement.setText("Movement:");
        jLblMovement.setMaximumSize(new java.awt.Dimension(2000, 20));
        jLblMovement.setMinimumSize(new java.awt.Dimension(54, 20));
        jLblMovement.setPreferredSize(new java.awt.Dimension(54, 20));

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255), 3, true));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("VeP-Test");
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1formComponentResized(evt);
            }
        });

        jSplitPane.setDividerLocation(730);
        jSplitPane.setDividerSize(10);

        jPneVideo.setBorder(javax.swing.BorderFactory.createTitledBorder("Video"));
        jPneVideo.setLayout(new java.awt.BorderLayout(4, 4));

        jPneVideoOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPneVideoOptions.setMinimumSize(new java.awt.Dimension(30, 30));
        jPneVideoOptions.setPreferredSize(new java.awt.Dimension(597, 30));

        jCbsBW.setText("Do Black & White");
        jCbsBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsBWActionPerformed(evt);
            }
        });

        jCbsShowCross.setSelected(true);
        jCbsShowCross.setText("show Cross");
        jCbsShowCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsShowCrossActionPerformed(evt);
            }
        });

        jCbsShowRectangle.setText("show Rectangle");
        jCbsShowRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbsShowRectangleActionPerformed(evt);
            }
        });

        jBtnSetGrid.setText("set Grid");
        jBtnSetGrid.setMaximumSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.setMinimumSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.setPreferredSize(new java.awt.Dimension(69, 21));
        jBtnSetGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSetGridActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPneVideoOptionsLayout = new javax.swing.GroupLayout(jPneVideoOptions);
        jPneVideoOptions.setLayout(jPneVideoOptionsLayout);
        jPneVideoOptionsLayout.setHorizontalGroup(
            jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneVideoOptionsLayout.createSequentialGroup()
                .addComponent(jCbsBW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbsShowCross)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbsShowRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                .addComponent(jBtnSetGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPneVideoOptionsLayout.setVerticalGroup(
            jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneVideoOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCbsBW, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(jCbsShowCross)
                .addComponent(jCbsShowRectangle)
                .addComponent(jBtnSetGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPneVideo.add(jPneVideoOptions, java.awt.BorderLayout.PAGE_END);

        jSclPneVideo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jSclPneVideoComponentResized(evt);
            }
        });
        jPneVideo.add(jSclPneVideo, java.awt.BorderLayout.CENTER);

        jSplitPane.setLeftComponent(jPneVideo);

        jPneRecord.setBorder(javax.swing.BorderFactory.createTitledBorder("Recording"));

        jLblTrackingBlob.setText("tracking Blob:");

        jCbxTrackingBlob.setModel(blobModel);
        jCbxTrackingBlob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbxTrackingBlobActionPerformed(evt);
            }
        });

        jSclPneGraphen.setBorder(javax.swing.BorderFactory.createTitledBorder("Graphen:"));

        jPneGraphen.setLayout(new javax.swing.BoxLayout(jPneGraphen, javax.swing.BoxLayout.Y_AXIS));
        jSclPneGraphen.setViewportView(jPneGraphen);

        jPneRecTime.setLayout(new java.awt.BorderLayout());

        jSpnRecTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpnRecTime.setModel(new javax.swing.SpinnerNumberModel(120, 0, 600, 1));
        jSpnRecTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpnRecTimeStateChanged(evt);
            }
        });
        jPneRecTime.add(jSpnRecTime, java.awt.BorderLayout.CENTER);

        jBtnRecord.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtnRecord.setText("Start");
        jBtnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRecordActionPerformed(evt);
            }
        });

        jBtnSaveData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtnSaveData.setText("SAVE");
        jBtnSaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPneRecordLayout = new javax.swing.GroupLayout(jPneRecord);
        jPneRecord.setLayout(jPneRecordLayout);
        jPneRecordLayout.setHorizontalGroup(
            jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCbxTrackingBlob, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSclPneGraphen)
            .addGroup(jPneRecordLayout.createSequentialGroup()
                .addComponent(jLblTrackingBlob)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPneRecordLayout.createSequentialGroup()
                .addComponent(jPneRecTime, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnRecord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnSaveData))
        );
        jPneRecordLayout.setVerticalGroup(
            jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPneRecordLayout.createSequentialGroup()
                .addComponent(jLblTrackingBlob)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbxTrackingBlob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSclPneGraphen, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPneRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSaveData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPneRecTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jSplitPane.setRightComponent(jPneRecord);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1064, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1064, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 688, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        if (evt.getPropertyName().equals("maximum")) {
            if ((boolean) evt.getNewValue()) {
                setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255), 0, true));
            } else {
                setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255), 3, true));
            }
        }
    }//GEN-LAST:event_formPropertyChange

    private void jCbsBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsBWActionPerformed
        this.blobTracker.setBw(this.jCbsBW.isSelected());
    }//GEN-LAST:event_jCbsBWActionPerformed

    private void jCbsShowCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsShowCrossActionPerformed
        this.blobTracker.setPc(this.jCbsShowCross.isSelected());
    }//GEN-LAST:event_jCbsShowCrossActionPerformed

    private void jCbsShowRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbsShowRectangleActionPerformed
        this.blobTracker.setPr(this.jCbsShowRectangle.isSelected());
    }//GEN-LAST:event_jCbsShowRectangleActionPerformed

    private void jBtnSetGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSetGridActionPerformed
        this.blobTracker.resetGrid();
    }//GEN-LAST:event_jBtnSetGridActionPerformed

    private void jSclPneVideoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSclPneVideoComponentResized
        Rectangle bounds = this.jSclPneVideo.getViewport().getViewRect();
        Dimension size = this.jSclPneVideo.getViewport().getViewSize();
        int x = (size.width - bounds.width) / 2;
        int y = (size.height - bounds.height) / 2;
        this.jSclPneVideo.getViewport().setViewPosition(new Point(x, y));
        this.jSclPneVideo.updateUI();
    }//GEN-LAST:event_jSclPneVideoComponentResized

    private void jCbxTrackingBlobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbxTrackingBlobActionPerformed
        this.blobTracker.setTrackingBlob((Blob) blobModel.getSelectedItem());
    }//GEN-LAST:event_jCbxTrackingBlobActionPerformed

    private void jSpnRecTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpnRecTimeStateChanged
        System.out.println((int)jSpnRecTime.getValue());
    }//GEN-LAST:event_jSpnRecTimeStateChanged

    private void jBtnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRecordActionPerformed
        this.record = !this.record;
        if (this.record) {
            this.jBtnRecord.setText("Stop");
            //Starte die Aufnahme
            this.recStart();
        } else {
            this.jBtnRecord.setText("Start");
            //Stop Record
            this.recStop();
        }
    }//GEN-LAST:event_jBtnRecordActionPerformed

    private void jPanel1formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1formComponentResized
        if (evt.getComponent().equals(this)) {
            this.jSplitPane.setDividerLocation(this.getSize().width - 400);
        }
    }//GEN-LAST:event_jPanel1formComponentResized

    private void jBtnSaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveDataActionPerformed
    }//GEN-LAST:event_jBtnSaveDataActionPerformed


    @Override
    public void webcamOpen(WebcamEvent we) {
            System.out.println("webcam open");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
            System.out.println("webcam closed");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
            System.out.println("webcam disposed");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
            // do nothing
    }
    

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
        System.out.println("IF Opened!");
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        System.out.println("IF Closing!");

    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        System.out.println("IF Closed!");
            webcam.close();
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
            System.out.println("IF Iconified!");

            System.out.println("webcam viewer paused");
            panel.pause();
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
            System.out.println("IF Deiconified!");
            System.out.println("webcam viewer resumed");
            panel.resume();
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
System.out.println("IF Activated!");
            panel.resume();
            
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
System.out.println("IF Deactivated!");
            panel.pause();

    }
    
    
    
    
    
    
    @Override
    public void uncaughtException(Thread t, Throwable e) {
            System.err.println(String.format("Exception in thread %s", t.getName()));
            e.printStackTrace();
    }
    
    @Override
    public void webcamFound(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.addItem(event.getWebcam());
            }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent event) {
            if (picker != null) {
                    picker.removeItem(event.getWebcam());
            }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {
                panel.stop();
                remove(panel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                
                initWebcam(webcam);
            
            }
        }
    }

    private Dimension getBiggestViewSize(Webcam webcam) {
        Dimension newSize = new Dimension(0, 0);
        for (Dimension size : webcam.getViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
        for (Dimension size : webcam.getCustomViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
	return newSize;			
    }
    
    private void initWebcam(Webcam webcam) {
        if (webcam == null) {
            System.exit(1);
        }
        
        webcam.setCustomViewSizes(nonStandardResolutions);
                                
        webcam.setViewSize(getBiggestViewSize(webcam));

        System.out.println("size: " + getBiggestViewSize(webcam));
        webcam.addWebcamListener(this);

        System.out.println("selected " + webcam.getName());

        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(false);
        panel.setPainter(blobTracker);
        panel.addMouseListener(blobTracker);

        //this.jPneVideo.add(panel, BorderLayout.CENTER);
        this.jSclPneVideo.add(panel);
        this.jSclPneVideo.setViewportView(panel);
        updateUI();
        
        Thread t = new Thread() {

                @Override
                public void run() {
                        panel.start();
                }
        };
        t.setName("example-stoper");
        t.setDaemon(true);
        t.setUncaughtExceptionHandler(this);
        t.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnRecord;
    private javax.swing.JButton jBtnSaveData;
    private javax.swing.JButton jBtnSetGrid;
    private javax.swing.JCheckBox jCbsBW;
    private javax.swing.JCheckBox jCbsShowCross;
    private javax.swing.JCheckBox jCbsShowRectangle;
    private javax.swing.JComboBox<String> jCbxTrackingBlob;
    private javax.swing.JLabel jLblCrossBorder;
    private javax.swing.JLabel jLblMovement;
    private javax.swing.JLabel jLblMovementStemp;
    private javax.swing.JLabel jLblNoice;
    private javax.swing.JLabel jLblNoiceStemp;
    private javax.swing.JLabel jLblRecTime;
    private javax.swing.JLabel jLblTrackingBlob;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPneGraphen;
    private javax.swing.JPanel jPneRecTime;
    private javax.swing.JPanel jPneRecord;
    private javax.swing.JPanel jPneVideo;
    private javax.swing.JPanel jPneVideoOptions;
    private javax.swing.JScrollPane jSclPneGraphen;
    private javax.swing.JScrollPane jSclPneVideo;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JSpinner jSpnRecTime;
    // End of variables declaration//GEN-END:variables
}
