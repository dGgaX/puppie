/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.welpentest;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.lang.Thread.UncaughtExceptionHandler;

import com.github.sarxos.webcam.*;
import de.abring.welpentest.farbbegrenzer.FarbbegrenzerPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;

/**
 *
 * @author Andreas
 */
public class VePTest extends javax.swing.JPanel implements WebcamListener, WindowListener, UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener{

    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private MyPainter myPainter;
    private FarbbegrenzerPanel farbbegrenzerPanel;
    /**
     * Creates new form VePTest
     */
    public VePTest() {
        initComponents();
        farbbegrenzerPanel = new FarbbegrenzerPanel();
        myPainter = new MyPainter(farbbegrenzerPanel);	
        this.jSpinner1.setValue((int) 25);
        picker = new WebcamPicker();
        picker.addItemListener(this);

        webcam = picker.getSelectedWebcam();

        Dimension[] nonStandardResolutions = new Dimension[] {
            WebcamResolution.PAL.getSize(),   // you can use predefined resolution
            WebcamResolution.HD720.getSize(),
        };
        webcam.setCustomViewSizes(nonStandardResolutions);
        Dimension newSize = new Dimension(0, 0);
        for (Dimension size : webcam.getViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
        for (Dimension size : webcam.getCustomViewSizes()) {
            if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                newSize = size;
        }
        webcam.setViewSize(newSize);
        System.out.println("size: " + newSize);
        webcam.addWebcamListener(this);
        
        panel = new WebcamPanel(webcam);
        panel.setPainter(myPainter);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(false);
        
        System.out.println("selected " + webcam.getName());
        
        this.add(picker, BorderLayout.NORTH);
        this.add(farbbegrenzerPanel, BorderLayout.EAST);
        
        this.add(panel, BorderLayout.CENTER);
        updateUI();
        Thread t = new Thread() {

                @Override
                public void run() {
                        panel.start();
                }
        };
        t.setName("example-stoper");
        t.setDaemon(true);
        t.setUncaughtExceptionHandler(this);
        t.start();
        
        if (webcam != null) {
            

        } else {
            System.out.println("No webcam detected");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jCheckBox2 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jCheckBox1.setText("B/W");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jPanel1.add(jSpinner1);

        jCheckBox2.setText("Pause");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox2);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.myPainter.setBw(this.jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        this.myPainter.setToleranz((int) this.jSpinner1.getValue());
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.myPainter.setPause(this.jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

    @Override
	public void webcamOpen(WebcamEvent we) {
		System.out.println("webcam open");
	}

	@Override
	public void webcamClosed(WebcamEvent we) {
		System.out.println("webcam closed");
	}

	@Override
	public void webcamDisposed(WebcamEvent we) {
		System.out.println("webcam disposed");
	}

	@Override
	public void webcamImageObtained(WebcamEvent we) {
		// do nothing
	}

	@Override
	public void windowActivated(WindowEvent e) {
	}

	@Override
	public void windowClosed(WindowEvent e) {
		webcam.close();
	}

	@Override
	public void windowClosing(WindowEvent e) {
	}

	@Override
	public void windowOpened(WindowEvent e) {
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		System.out.println("webcam viewer resumed");
		panel.resume();
	}

	@Override
	public void windowIconified(WindowEvent e) {
		System.out.println("webcam viewer paused");
		panel.pause();
	}

	@Override
	public void uncaughtException(Thread t, Throwable e) {
		System.err.println(String.format("Exception in thread %s", t.getName()));
		e.printStackTrace();
	}

	@Override
	public void itemStateChanged(ItemEvent e) {
		if (e.getItem() != webcam) {
			if (webcam != null) {

				panel.stop();

				remove(panel);

				webcam.removeWebcamListener(this);
				webcam.close();

				webcam = (Webcam) e.getItem();
                                Dimension[] nonStandardResolutions = new Dimension[] {
                                    WebcamResolution.PAL.getSize(),   // you can use predefined resolution
                                    WebcamResolution.HD720.getSize(),
                                };
                                webcam.setCustomViewSizes(nonStandardResolutions);
                                Dimension newSize = new Dimension(0, 0);
                                for (Dimension size : webcam.getViewSizes()) {
                                    if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                                        newSize = size;
                                }
				for (Dimension size : webcam.getCustomViewSizes()) {
                                    if (size.getWidth() * size.getHeight() > newSize.getWidth() * newSize.getHeight())
                                        newSize = size;
                                }
				webcam.setViewSize(newSize);
                                System.out.println("size: " + newSize);
        			webcam.addWebcamListener(this);

				System.out.println("selected " + webcam.getName());

				panel = new WebcamPanel(webcam, false);
				panel.setFPSDisplayed(true);
                                panel.setDisplayDebugInfo(true);
                                panel.setImageSizeDisplayed(true);
                                panel.setMirrored(false);
                                panel.setPainter(myPainter);
        
				add(panel, BorderLayout.CENTER);
				updateUI();
				Thread t = new Thread() {

					@Override
					public void run() {
						panel.start();
					}
				};
				t.setName("example-stoper");
				t.setDaemon(true);
				t.setUncaughtExceptionHandler(this);
				t.start();
			}
		}
	}

	@Override
	public void webcamFound(WebcamDiscoveryEvent event) {
		if (picker != null) {
			picker.addItem(event.getWebcam());
		}
	}

	@Override
	public void webcamGone(WebcamDiscoveryEvent event) {
		if (picker != null) {
			picker.removeItem(event.getWebcam());
		}
	}
}
